{"mappings":"YAEA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,YAEpBA,MAIQQ,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAAAC,GAChCA,EAAMC,iBACNC,QAAQC,IAAIH,EAAMI,OAAOC,UAKzB,IAJA,IAAIC,EAAQC,OAAOP,EAAMI,OAAOC,SAAShB,MAAMmB,OACzCC,EAAOF,OAAOP,EAAMI,OAAOC,SAASI,KAAKD,OACzCE,EAASH,OAAOP,EAAMI,OAAOC,SAASK,OAAOF,OAE1CG,EAAI,EAAGA,GAAKD,EAAQC,IAE3BxB,EAAcwB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAEjBa,QAAQC,IACN,uBAAwCW,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,UAIjD0B,OAAM,SAAAF,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAElBa,QAAQC,IACN,sBAAuCW,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,UAGnDiB,EAAQC,OAAOD,EAAOG,M","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst formEl = document.querySelector('.form');\n\nformEl.addEventListener('submit', event => {\n  event.preventDefault();\n  console.log(event.target.elements);\n  let delay = Number(event.target.elements.delay.value);\n  const step = Number(event.target.elements.step.value);\n  const amount = Number(event.target.elements.amount.value);\n\n  for (let i = 1; i <= amount; i++) {\n\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        // Notiflix.Notify.success \n        console.log(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n\n      })\n      .catch(({ position, delay }) => {\n        // Notiflix.Notify.warning\n        console.log(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay = Number(delay +step);\n  }\n});\n\n// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах, шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// <form class=\"form\">\n//   <label>\n//     First delay (ms)\n//     <input type=\"number\" name=\"delay\" required />\n//   </label>\n//   <label>\n//     Delay step (ms)\n//     <input type=\"number\" name=\"step\" required />\n//   </label>\n//   <label>\n//     Amount\n//     <input type=\"number\" name=\"amount\" required />\n//   </label>\n//   <button type=\"submit\">Create promises</button>\n// </form>\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount. При каждом вызове передай ей номер создаваемого промиса (position) и задержку учитывая введенную пользователем первую задержку (delay) и шаг (step).\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени. Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров. Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n// Библиотека уведомлений\n// ВНИМАНИЕ\n// Этот функционал не обязателен при сдаче задания, но будет хорошей дополнительной практикой.\n\n// Для отображения уведомлений пользователю вместо console.log() используй библиотеку notiflix.\n"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","event","preventDefault","console","log","target","elements","delay1","Number","value","step","amount","i","then","param","concat","catch"],"version":3,"file":"03-promises.bd45a245.js.map"}